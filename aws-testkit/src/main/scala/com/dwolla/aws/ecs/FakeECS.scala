package com.dwolla.aws.ecs

import cats.*
import cats.syntax.all.*
import com.amazonaws.ecs.*
import smithy4s.Timestamp

abstract class FakeECS[F[_] : ApplicativeThrow] extends ECS[F] {
  override def createCapacityProvider(name: String, autoScalingGroupProvider: AutoScalingGroupProvider, tags: Option[List[Tag]]): F[CreateCapacityProviderResponse] = (new NotImplementedError).raiseError
  override def createCluster(clusterName: Option[String], tags: Option[List[Tag]], settings: Option[List[ClusterSetting]], configuration: Option[ClusterConfiguration], capacityProviders: Option[List[String]], defaultCapacityProviderStrategy: Option[List[CapacityProviderStrategyItem]], serviceConnectDefaults: Option[ClusterServiceConnectDefaultsRequest]): F[CreateClusterResponse] = (new NotImplementedError).raiseError
  override def createService(serviceName: String, enableECSManagedTags: Boolean, enableExecuteCommand: Boolean, cluster: Option[String], taskDefinition: Option[String], loadBalancers: Option[List[LoadBalancer]], serviceRegistries: Option[List[ServiceRegistry]], desiredCount: Option[BoxedInteger], clientToken: Option[String], launchType: Option[LaunchType], capacityProviderStrategy: Option[List[CapacityProviderStrategyItem]], platformVersion: Option[String], role: Option[String], deploymentConfiguration: Option[DeploymentConfiguration], placementConstraints: Option[List[PlacementConstraint]], placementStrategy: Option[List[PlacementStrategy]], networkConfiguration: Option[NetworkConfiguration], healthCheckGracePeriodSeconds: Option[BoxedInteger], schedulingStrategy: Option[SchedulingStrategy], deploymentController: Option[DeploymentController], tags: Option[List[Tag]], propagateTags: Option[PropagateTags], serviceConnectConfiguration: Option[ServiceConnectConfiguration]): F[CreateServiceResponse] = (new NotImplementedError).raiseError
  override def createTaskSet(service: String, cluster: String, taskDefinition: String, externalId: Option[String], networkConfiguration: Option[NetworkConfiguration], loadBalancers: Option[List[LoadBalancer]], serviceRegistries: Option[List[ServiceRegistry]], launchType: Option[LaunchType], capacityProviderStrategy: Option[List[CapacityProviderStrategyItem]], platformVersion: Option[String], scale: Option[Scale], clientToken: Option[String], tags: Option[List[Tag]]): F[CreateTaskSetResponse] = (new NotImplementedError).raiseError
  override def deleteAccountSetting(name: SettingName, principalArn: Option[String]): F[DeleteAccountSettingResponse] = (new NotImplementedError).raiseError
  override def deleteAttributes(attributes: List[Attribute], cluster: Option[String]): F[DeleteAttributesResponse] = (new NotImplementedError).raiseError
  override def deleteCapacityProvider(capacityProvider: String): F[DeleteCapacityProviderResponse] = (new NotImplementedError).raiseError
  override def deleteCluster(cluster: String): F[DeleteClusterResponse] = (new NotImplementedError).raiseError
  override def deleteService(service: String, cluster: Option[String], force: Option[BoxedBoolean]): F[DeleteServiceResponse] = (new NotImplementedError).raiseError
  override def deleteTaskSet(cluster: String, service: String, taskSet: String, force: Option[BoxedBoolean]): F[DeleteTaskSetResponse] = (new NotImplementedError).raiseError
  override def deregisterContainerInstance(containerInstance: String, cluster: Option[String], force: Option[BoxedBoolean]): F[DeregisterContainerInstanceResponse] = (new NotImplementedError).raiseError
  override def deregisterTaskDefinition(taskDefinition: String): F[DeregisterTaskDefinitionResponse] = (new NotImplementedError).raiseError
  override def describeCapacityProviders(capacityProviders: Option[List[String]], include: Option[List[CapacityProviderField]], maxResults: Option[BoxedInteger], nextToken: Option[String]): F[DescribeCapacityProvidersResponse] = (new NotImplementedError).raiseError
  override def describeClusters(clusters: Option[List[String]], include: Option[List[ClusterField]]): F[DescribeClustersResponse] = (new NotImplementedError).raiseError
  override def describeContainerInstances(containerInstances: List[String], cluster: Option[String], include: Option[List[ContainerInstanceField]]): F[DescribeContainerInstancesResponse] = (new NotImplementedError).raiseError
  override def describeServices(services: List[String], cluster: Option[String], include: Option[List[ServiceField]]): F[DescribeServicesResponse] = (new NotImplementedError).raiseError
  override def describeTaskDefinition(taskDefinition: String, include: Option[List[TaskDefinitionField]]): F[DescribeTaskDefinitionResponse] = (new NotImplementedError).raiseError
  override def describeTasks(tasks: List[String], cluster: Option[String], include: Option[List[TaskField]]): F[DescribeTasksResponse] = (new NotImplementedError).raiseError
  override def describeTaskSets(cluster: String, service: String, taskSets: Option[List[String]], include: Option[List[TaskSetField]]): F[DescribeTaskSetsResponse] = (new NotImplementedError).raiseError
  override def discoverPollEndpoint(containerInstance: Option[String], cluster: Option[String]): F[DiscoverPollEndpointResponse] = (new NotImplementedError).raiseError
  override def executeCommand(command: String, task: String, interactive: Boolean, cluster: Option[String], container: Option[String]): F[ExecuteCommandResponse] = (new NotImplementedError).raiseError
  override def getTaskProtection(cluster: String, tasks: Option[List[String]]): F[GetTaskProtectionResponse] = (new NotImplementedError).raiseError
  override def listAccountSettings(effectiveSettings: Boolean, maxResults: Int, name: Option[SettingName], value: Option[String], principalArn: Option[String], nextToken: Option[String]): F[ListAccountSettingsResponse] = (new NotImplementedError).raiseError
  override def listAttributes(targetType: TargetType, cluster: Option[String], attributeName: Option[String], attributeValue: Option[String], nextToken: Option[String], maxResults: Option[BoxedInteger]): F[ListAttributesResponse] = (new NotImplementedError).raiseError
  override def listClusters(nextToken: Option[String], maxResults: Option[BoxedInteger]): F[ListClustersResponse] = (new NotImplementedError).raiseError
  override def listContainerInstances(cluster: Option[String], filter: Option[String], nextToken: Option[String], maxResults: Option[BoxedInteger], status: Option[ContainerInstanceStatus]): F[ListContainerInstancesResponse] = (new NotImplementedError).raiseError
  override def listServices(cluster: Option[String], nextToken: Option[String], maxResults: Option[BoxedInteger], launchType: Option[LaunchType], schedulingStrategy: Option[SchedulingStrategy]): F[ListServicesResponse] = (new NotImplementedError).raiseError
  override def listServicesByNamespace(namespace: String, nextToken: Option[String], maxResults: Option[BoxedInteger]): F[ListServicesByNamespaceResponse] = (new NotImplementedError).raiseError
  override def listTagsForResource(resourceArn: String): F[ListTagsForResourceResponse] = (new NotImplementedError).raiseError
  override def listTaskDefinitionFamilies(familyPrefix: Option[String], status: Option[TaskDefinitionFamilyStatus], nextToken: Option[String], maxResults: Option[BoxedInteger]): F[ListTaskDefinitionFamiliesResponse] = (new NotImplementedError).raiseError
  override def listTaskDefinitions(familyPrefix: Option[String], status: Option[TaskDefinitionStatus], sort: Option[SortOrder], nextToken: Option[String], maxResults: Option[BoxedInteger]): F[ListTaskDefinitionsResponse] = (new NotImplementedError).raiseError
  override def listTasks(cluster: Option[String], containerInstance: Option[String], family: Option[String], nextToken: Option[String], maxResults: Option[BoxedInteger], startedBy: Option[String], serviceName: Option[String], desiredStatus: Option[DesiredStatus], launchType: Option[LaunchType]): F[ListTasksResponse] = (new NotImplementedError).raiseError
  override def putAccountSetting(name: SettingName, value: String, principalArn: Option[String]): F[PutAccountSettingResponse] = (new NotImplementedError).raiseError
  override def putAccountSettingDefault(name: SettingName, value: String): F[PutAccountSettingDefaultResponse] = (new NotImplementedError).raiseError
  override def putAttributes(attributes: List[Attribute], cluster: Option[String]): F[PutAttributesResponse] = (new NotImplementedError).raiseError
  override def putClusterCapacityProviders(cluster: String, capacityProviders: List[String], defaultCapacityProviderStrategy: List[CapacityProviderStrategyItem]): F[PutClusterCapacityProvidersResponse] = (new NotImplementedError).raiseError
  override def registerContainerInstance(cluster: Option[String], instanceIdentityDocument: Option[String], instanceIdentityDocumentSignature: Option[String], totalResources: Option[List[Resource]], versionInfo: Option[VersionInfo], containerInstanceArn: Option[String], attributes: Option[List[Attribute]], platformDevices: Option[List[PlatformDevice]], tags: Option[List[Tag]]): F[RegisterContainerInstanceResponse] = (new NotImplementedError).raiseError
  override def registerTaskDefinition(family: String, containerDefinitions: List[ContainerDefinition], taskRoleArn: Option[String], executionRoleArn: Option[String], networkMode: Option[NetworkMode], volumes: Option[List[Volume]], placementConstraints: Option[List[TaskDefinitionPlacementConstraint]], requiresCompatibilities: Option[List[Compatibility]], cpu: Option[String], memory: Option[String], tags: Option[List[Tag]], pidMode: Option[PidMode], ipcMode: Option[IpcMode], proxyConfiguration: Option[ProxyConfiguration], inferenceAccelerators: Option[List[InferenceAccelerator]], ephemeralStorage: Option[EphemeralStorage], runtimePlatform: Option[RuntimePlatform]): F[RegisterTaskDefinitionResponse] = (new NotImplementedError).raiseError
  override def runTask(taskDefinition: String, enableECSManagedTags: Boolean, enableExecuteCommand: Boolean, capacityProviderStrategy: Option[List[CapacityProviderStrategyItem]], cluster: Option[String], count: Option[BoxedInteger], group: Option[String], launchType: Option[LaunchType], networkConfiguration: Option[NetworkConfiguration], overrides: Option[TaskOverride], placementConstraints: Option[List[PlacementConstraint]], placementStrategy: Option[List[PlacementStrategy]], platformVersion: Option[String], propagateTags: Option[PropagateTags], referenceId: Option[String], startedBy: Option[String], tags: Option[List[Tag]]): F[RunTaskResponse] = (new NotImplementedError).raiseError
  override def startTask(containerInstances: List[String], taskDefinition: String, enableECSManagedTags: Boolean, enableExecuteCommand: Boolean, cluster: Option[String], group: Option[String], networkConfiguration: Option[NetworkConfiguration], overrides: Option[TaskOverride], propagateTags: Option[PropagateTags], referenceId: Option[String], startedBy: Option[String], tags: Option[List[Tag]]): F[StartTaskResponse] = (new NotImplementedError).raiseError
  override def stopTask(task: String, cluster: Option[String], reason: Option[String]): F[StopTaskResponse] = (new NotImplementedError).raiseError
  override def submitAttachmentStateChanges(attachments: List[AttachmentStateChange], cluster: Option[String]): F[SubmitAttachmentStateChangesResponse] = (new NotImplementedError).raiseError
  override def submitContainerStateChange(cluster: Option[String], task: Option[String], containerName: Option[String], runtimeId: Option[String], status: Option[String], exitCode: Option[BoxedInteger], reason: Option[String], networkBindings: Option[List[NetworkBinding]]): F[SubmitContainerStateChangeResponse] = (new NotImplementedError).raiseError
  override def submitTaskStateChange(cluster: Option[String], task: Option[String], status: Option[String], reason: Option[String], containers: Option[List[ContainerStateChange]], attachments: Option[List[AttachmentStateChange]], managedAgents: Option[List[ManagedAgentStateChange]], pullStartedAt: Option[Timestamp], pullStoppedAt: Option[Timestamp], executionStoppedAt: Option[Timestamp]): F[SubmitTaskStateChangeResponse] = (new NotImplementedError).raiseError
  override def tagResource(resourceArn: String, tags: List[Tag]): F[TagResourceResponse] = (new NotImplementedError).raiseError
  override def untagResource(resourceArn: String, tagKeys: List[TagKey]): F[UntagResourceResponse] = (new NotImplementedError).raiseError
  override def updateCapacityProvider(name: String, autoScalingGroupProvider: AutoScalingGroupProviderUpdate): F[UpdateCapacityProviderResponse] = (new NotImplementedError).raiseError
  override def updateCluster(cluster: String, settings: Option[List[ClusterSetting]], configuration: Option[ClusterConfiguration], serviceConnectDefaults: Option[ClusterServiceConnectDefaultsRequest]): F[UpdateClusterResponse] = (new NotImplementedError).raiseError
  override def updateClusterSettings(cluster: String, settings: List[ClusterSetting]): F[UpdateClusterSettingsResponse] = (new NotImplementedError).raiseError
  override def updateContainerAgent(containerInstance: String, cluster: Option[String]): F[UpdateContainerAgentResponse] = (new NotImplementedError).raiseError
  override def updateContainerInstancesState(containerInstances: List[String], status: ContainerInstanceStatus, cluster: Option[String]): F[UpdateContainerInstancesStateResponse] = (new NotImplementedError).raiseError
  override def updateService(service: String, forceNewDeployment: Boolean, cluster: Option[String], desiredCount: Option[BoxedInteger], taskDefinition: Option[String], capacityProviderStrategy: Option[List[CapacityProviderStrategyItem]], deploymentConfiguration: Option[DeploymentConfiguration], networkConfiguration: Option[NetworkConfiguration], placementConstraints: Option[List[PlacementConstraint]], placementStrategy: Option[List[PlacementStrategy]], platformVersion: Option[String], healthCheckGracePeriodSeconds: Option[BoxedInteger], enableExecuteCommand: Option[BoxedBoolean], enableECSManagedTags: Option[BoxedBoolean], loadBalancers: Option[List[LoadBalancer]], propagateTags: Option[PropagateTags], serviceRegistries: Option[List[ServiceRegistry]], serviceConnectConfiguration: Option[ServiceConnectConfiguration]): F[UpdateServiceResponse] = (new NotImplementedError).raiseError
  override def updateServicePrimaryTaskSet(cluster: String, service: String, primaryTaskSet: String): F[UpdateServicePrimaryTaskSetResponse] = (new NotImplementedError).raiseError
  override def updateTaskProtection(cluster: String, tasks: List[String], protectionEnabled: Boolean, expiresInMinutes: Option[BoxedInteger]): F[UpdateTaskProtectionResponse] = (new NotImplementedError).raiseError
  override def updateTaskSet(cluster: String, service: String, taskSet: String, scale: Scale): F[UpdateTaskSetResponse] = (new NotImplementedError).raiseError
}
